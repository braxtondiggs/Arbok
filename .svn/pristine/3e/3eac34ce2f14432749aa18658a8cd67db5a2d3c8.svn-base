var express = require('express')
  , app = express()  
  , server = require('http').createServer(app)
  , path = require('path')
  , io = require('socket.io').listen(server)
  , spawn = require('child_process').spawn
  //, mysql = require('mysql')

// all environments
app.set('port', process.env.TEST_PORT || 8080);
app.use(express.favicon());
app.use(express.logger('dev'));
app.use(express.bodyParser());
app.use(express.methodOverride());
app.use(express.static(path.join(__dirname, 'public')));
/*
var db = mysql.createConnection({
    host: 'localhost',
    port: 8889,
    user: 'root',
    password: 'root',
    database: 'node'
})

db.connect(function(err){
    if (err) console.log(err)
})*/

// development only
if ('development' == app.get('env')) {
  app.use(express.errorHandler());
}

//Routes
app.get('/', function (req, res) {
  res.sendfile(__dirname + '/public/index.html');
});

server.listen(app.get('port'), function(){
  console.log('Express server listening on port ' + app.get('port'));
});

//Socket.io Config
io.set('log level', 1);

server.listen(app.get('port'), function(){
  console.log('QBox is running on port ' + app.get('port'));
});

var ss, rr, playlist = Array(), song = Object();
//Run and pipe shell script output
function run_shell(cmd, args, cb, end) {
    var spawn = require('child_process').spawn,
        child = spawn(cmd, args),
        me = this;
    child.stdout.on('data', function (buffer) { cb(me, buffer); });
    child.stdout.on('end', end);
}


//Socket.io Server
io.sockets.on('connection', function (socket) {
    var server_id;
    socket.on("screen", function(data){
	socket.type = "screen";
	server_id = socket.id;
	ss = socket;
	ss.emit('playlist', playlist);
	console.log("Screen ready...");
    });
    socket.on("remote", function(data){
	socket.type = "remote";
	//var setup_info = {};
	//setup_info.server_id = server_id;
	console.log(server_id);
	console.log('whats up');
	rr  = socket;
	rr.emit('setup', {'server_id': server_id})
	console.log("Remote ready...");
    });
    socket.on("new song", function(data){
	ss.emit('new song', data);
	console.log('server data');
    });
    socket.on("vote", function(data){
	//data.vote
	rr.emit('playlist', {status:'success'});
	console.log("Voting...");
    });
    socket.on("hello", function(data) {
    console.log("hello Form the Server");
    console.log(data);
    console.log(data.action);
    
    //notes.push(data)
        io.sockets.emit('new note', data)
        // Use node's db injection format to filter incoming data
        db.query('INSERT INTO notes (note) VALUES (?)', data.action)
 })
 
  socket.on("upload", function(data) {
    console.log(data);
    console.log('upload start');
    io.sockets.emit("uploadstart", data);
  });
 /*socket.on("controll", function(data){
	console.log(data);
   if(socket.type === "remote"){

     if(data.action === "tap"){
         if(ss != undefined){
            ss.emit("controlling", {action:"enter"});
            }
     }
     else if(data.action === "swipeLeft"){
      if(ss != undefined){
          ss.emit("controlling", {action:"goLeft"});
          }
     }
     else if(data.action === "swipeRight"){
       if(ss != undefined){
           ss.emit("controlling", {action:"goRight"});
           }
     }
   }
 });

 socket.on("video", function(data){

    if( data.action === "play"){
    var id = data.video_id,
         url = "http://www.youtube.com/watch?v="+id;

    var runShell = new run_shell('youtube-dl',['-o','%(id)s.%(ext)s','-f','/18/22',url],
        function (me, buffer) {
            me.stdout += buffer.toString();
            socket.emit("loading",{output: me.stdout});
            console.log(me.stdout);
         },
        function () {
            //child = spawn('omxplayer',[id+'.mp4']);
            omx.start(id+'.mp4');
        });
    }

 });*/
});