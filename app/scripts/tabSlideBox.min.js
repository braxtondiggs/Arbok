/*
 * SimplePubSub from https://github.com/mbenford/ngTagsInput/blob/master/src/util.js
 * */
'use strict';

function SimplePubSub() {
	var events = {};
	return {
		on: function(names, handler) {
			names.split(' ').forEach(function(name) {
				if (!events[name]) {
					events[name] = [];
				}
				events[name].push(handler);
			});
			return this;
		},
		trigger: function(name, args) {
			angular.forEach(events[name], function(handler) {
				handler.call(null, args);
			});
			return this;
		}
	};
}

angular.module('tabSlideBox', [])
	.directive('onFinishRender', function($timeout) {
		return {
			restrict: 'A',
			link: function(scope) {
				$timeout(function() {
					scope.$emit('ngRepeatFinished');
				});
			}
		};
	})
	.directive('tabSlideBox', ['$timeout', '$window', '$ionicSlideBoxDelegate', '$ionicScrollDelegate',
		function($timeout, $window, $ionicSlideBoxDelegate, $ionicScrollDelegate) {

			return {
				restrict: 'A, E, C',
				link: function(scope, element, attrs) {

					var ta = element[0],
						$ta = element;
					$ta.addClass('tabbed-slidebox');
					if (attrs.tabsPosition === 'bottom') {
						$ta.addClass('btm');
					}

					function renderScrollableTabs() {
						var iconsDiv = angular.element(ta.querySelector('.tsb-icons')),
							icons = iconsDiv.find('a'),
							totalTabs = icons.length;

						angular.forEach(icons, function(value, key) {
							var a = angular.element(value);
							a.on('click', function() {
								$ionicSlideBoxDelegate.slide(key);
							});
						});

						var initialIndex = attrs.tab;
						//Initializing the middle tab
						if (typeof attrs.tab === 'undefined' || (totalTabs <= initialIndex) || initialIndex < 0) {
							initialIndex = Math.floor(icons.length / 2);
						}

						$timeout(function() {
							setPosition(0);
							$ionicSlideBoxDelegate.slide(initialIndex);
						});
					}

					function setPosition(index) {
						var iconsDiv = angular.element(ta.querySelector('.tsb-icons')),
							icons = iconsDiv.find('a'),
							wrap = iconsDiv[0].querySelector('.tsb-ic-wrp');
						var scrollDiv = wrap.querySelector('.scroll');

						var middle = iconsDiv[0].offsetWidth / 2;
						var curEl = angular.element(icons[index]);
						if (curEl && curEl.length) {
							var curElWidth = curEl[0].offsetWidth,
								curElLeft = curEl[0].offsetLeft;

							angular.element(iconsDiv[0].querySelector('.active')).removeClass('active');
							curEl.addClass('active');

							var leftStr = (middle - (curElLeft) - curElWidth / 2 + 5);
							//If tabs are not scrollable
							if (!scrollDiv) {
								leftStr = (middle - (curElLeft) - curElWidth / 2 + 5) + 'px';
								wrap.style.webkitTransform = 'translate3d(' + leftStr + ',0,0)';
							} else {
								//If scrollable tabs
								var wrapWidth = wrap.offsetWidth;
								var currentX = Math.abs(getX(scrollDiv.style.webkitTransform));
								var leftOffset = 100;
								var elementOffset = 40;
								//If tabs are reaching right end or left end
								if (((currentX + wrapWidth) < (curElLeft + curElWidth + elementOffset)) || (currentX > (curElLeft - leftOffset))) {
									if (leftStr > 0) {
										leftStr = 0;
									}
									//Use this scrollTo, so when scrolling tab manually will not flicker
									$ionicScrollDelegate.scrollTo(Math.abs(leftStr), 0, true);
								}
							}
						}
					}

					function getX(matrix) {
						matrix = matrix.replace('translate3d(', '');
						matrix = matrix.replace('translate(', '');
						return (parseInt(matrix, 10));
					}
					var events = scope.events;
					events.on('slideChange', function(data) {
						setPosition(data.index);
					});
					/*jshint unused:false*/
					events.on('ngRepeatFinished', function(ngRepeatFinishedEvent) {
						renderScrollableTabs();
					});

					renderScrollableTabs();
				},
				controller: function($scope) {
					$scope.events = new SimplePubSub();

					$scope.slideHasChanged = function(index) {
						$scope.events.trigger('slideChange', {
							'index': index
						});
						$timeout(function() {
							$scope.onSlideMove({
								/*jshint evil:true */
								'index': eval(index)
							});
						}, 100);
					};
					$scope.$watch('artist.loaded', function(ngRepeatFinishedEvent) {
						if ($scope.artist.loaded === true) {
							$scope.events.trigger('ngRepeatFinished', {
								'event': ngRepeatFinishedEvent
							});
						}
					});
					$scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {
						$scope.events.trigger('ngRepeatFinished', {
							'event': ngRepeatFinishedEvent
						});
					});
				}
			};

		}
	]);